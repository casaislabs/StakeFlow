// Deploy/init script: initializes PDAs and migrates reward mint authority to the PDA
// Does not create ATAs or mint accounts. Works with Anchor (scripts) and with ts-node directly.

import * as anchor from "@coral-xyz/anchor";
import { TOKEN_PROGRAM_ID, getMint } from "@solana/spl-token";
import { stakeConfig } from "../config";
import { readFileSync } from "fs";
import * as path from "path";

type Provider = anchor.AnchorProvider;

async function run(providerArg?: Provider) {
  // 1) Resolve provider: injected by Anchor or from environment
  const provider = providerArg ?? anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const connection = provider.connection;
  const wallet = provider.wallet as anchor.Wallet;

  // Initial log for early-cut diagnostics
  console.log("Starting deploy.ts");

  // 2) Load IDL and build Program
  const idlPath = path.join(__dirname, "../target/idl/stake_flow.json");
  console.log("IDL path:", idlPath);
  const idl = JSON.parse(readFileSync(idlPath, "utf8")) as anchor.Idl & { address?: string };

  let program: anchor.Program;
  if (idl.address) {
    // Modern signature: (idl, provider) using address from IDL
    program = new anchor.Program(idl as anchor.Idl, provider);
  } else {
    // Fallback: resolve Program ID from the local keypair generated by Anchor
    const keypairPath = path.join(__dirname, "../target/deploy/stake_flow-keypair.json");
    console.log("IDL without address; using keypair to resolve Program ID:", keypairPath);
    const secret = JSON.parse(readFileSync(keypairPath, "utf8"));
    const kp = anchor.web3.Keypair.fromSecretKey(Uint8Array.from(secret));
    const fallbackProgramId = kp.publicKey;
    // Fill the address in the IDL and use the two-argument constructor
    (idl as any).address = fallbackProgramId.toBase58();
    program = new anchor.Program(idl as anchor.Idl, provider);
  }

  // 3) Mints from config (pre-created): does not create ATAs or accounts
  const stakeMint = new anchor.web3.PublicKey(stakeConfig.stakeMintAddress);
  const rewardMint = new anchor.web3.PublicKey(stakeConfig.rewardMintAddress);

  // 4) Derive required PDAs
  const [configPda] = anchor.web3.PublicKey.findProgramAddressSync(
    [Buffer.from("config")],
    program.programId
  );
  const [stakeVaultPda] = anchor.web3.PublicKey.findProgramAddressSync(
    [Buffer.from("stake_vault"), configPda.toBuffer()],
    program.programId
  );
  const [penaltyVaultPda] = anchor.web3.PublicKey.findProgramAddressSync(
    [Buffer.from("penalty_vault"), configPda.toBuffer()],
    program.programId
  );
  const [rewardMintAuthPda] = anchor.web3.PublicKey.findProgramAddressSync(
    [Buffer.from("reward_mint_authority")],
    program.programId
  );

  // 5) Informational logs
  // Note: in Anchor 0.32+ program logs appear in .anchor/program-logs/ after executing the instruction
  console.log("RPC:", (connection as any)._rpcEndpoint);
  console.log("Wallet:", wallet.publicKey.toBase58());
  console.log("Program ID:", program.programId.toBase58());
  console.log("Config PDA:", configPda.toBase58());
  console.log("Stake Vault PDA:", stakeVaultPda.toBase58());
  console.log("Penalty Vault PDA:", penaltyVaultPda.toBase58());
  console.log("Reward Mint Auth PDA:", rewardMintAuthPda.toBase58());

  // 6) Verify reward mint authority before
  const beforeInfo = await getMint(connection, rewardMint, "confirmed");
  const beforeAuth = beforeInfo.mintAuthority?.toBase58() ?? null;
  console.log("Reward mint authority (before):", beforeAuth);

  // 7) Execute initializeConfig (migrate authority and create PDAs)
  const { aprBps, minLockDuration, earlyUnstakePenaltyBps } = stakeConfig;
  const txSig = await program.methods
    .initializeConfig(aprBps, new anchor.BN(minLockDuration), earlyUnstakePenaltyBps)
    .accounts({
      admin: wallet.publicKey,
      stakeMint,
      rewardMint,
      config: configPda,
      stakeVault: stakeVaultPda,
      penaltyVault: penaltyVaultPda,
      rewardMintAuthority: rewardMintAuthPda,
      tokenProgram: TOKEN_PROGRAM_ID,
      systemProgram: anchor.web3.SystemProgram.programId,
    })
    .rpc();
  console.log("initializeConfig tx:", txSig);

  // 8) Verify reward mint authority after (should be the PDA)
  const afterInfo = await getMint(connection, rewardMint, "confirmed");
  const afterAuth = afterInfo.mintAuthority?.toBase58() ?? null;
  console.log("Reward mint authority (after):", afterAuth);
  if (afterAuth !== rewardMintAuthPda.toBase58()) {
    throw new Error(
      `Mint authority mismatch. Expected ${rewardMintAuthPda.toBase58()}, got ${afterAuth}`
    );
  }

  console.log("Initialization completed: PDAs created and mint authority migrated to PDA.");
  console.log("No ATAs or mint accounts have been created.");
}

// Anchor migrations support: provider is injected when invoked from Anchor
module.exports = async function (provider: Provider) {
  return run(provider);
};

// Direct execution support: allows `ts-node migrations/deploy.ts`
if (require.main === module) {
  run().catch((e) => {
    console.error("deploy.ts failed:", e);
    process.exit(1);
  });
}